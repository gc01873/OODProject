package mong;

import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CountDownLatch;
//import java.util.logging.Level;
//import java.util.logging.Logger;

import com.mongodb.async.SingleResultCallback;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import javafx.animation.PathTransition;
import javafx.animation.RotateTransition;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.*;
import javafx.scene.paint.Color;
import javafx.scene.shape.Arc;
import javafx.scene.shape.ArcType;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Line;
import javafx.scene.shape.Polygon;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.scene.text.Text;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Transform;
import javafx.stage.Screen;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.control.TextField;
import org.bson.Document;

public class OOD extends Application  {
    TextArea textArea = new TextArea();

    public static void main(String[] args) {

        launch();

    }
    @Override
    public void start(Stage primaryStage) throws Exception {

        primaryStage.setTitle("Tech 2GO");

        Pane pane = new Pane();


        Image image = new Image("https://cdn-imgix.headout.com/tour/22589/TOUR-IMAGE/f243beca-f842-4915-9c80-df5f65e81a20-11825-tokyo-early-blooming-cherry-blossom-?auto=compress&fm=pjpg&w=1080&h=675&crop=faces&fit=min");
        ImageView iv = new ImageView(image);
        iv.setFitWidth(Screen.getPrimary().getVisualBounds().getWidth());
        iv.setFitHeight(Screen.getPrimary().getVisualBounds().getHeight());



        //Create Username Label

        Label label1 = new Label("Enter Account Username: ");

        label1.setLayoutY(50);

        label1.setLayoutX(100);

        label1.setStyle("-fx-text-fill: black");


        //Create Password Label

        Label label2 = new Label("Enter Account Password: ");

        label2.setLayoutY(100);

        label2.setLayoutX(100);

        label2.setStyle("-fx-text-fill: black");


        //Create Username TextField

        TextField TextField1 = new TextField();

        TextField1.setLayoutX(240);

        TextField1.setLayoutY(50);

        //Create Password TextField

        TextField TextField2 = new TextField();

        TextField2.setLayoutX(240);

        TextField2.setLayoutY(100);

        TextField login= new TextField();
        login.setLayoutX(100);

        login.setLayoutY(150);
        login.setMinWidth(300);




        //Action of the Guest Button



        //Create Enter Button

        Button b5 = new Button("Enter");

        b5.setLayoutY(100);

        b5.setLayoutX(400);

        //Action of the Enter Button

        b5.setOnAction(new EventHandler<ActionEvent>() {
            @Override

            public void handle(ActionEvent event) {

                String username = TextField1.getText();

                String password = TextField2.getText();
                String[] confirm = AccountConfirmation(username, password);
                if (confirm.length <= 0) {
                    login.setText("Username or password is incorrect. Please Try Again");

                } else {

                    //figure out a way to use confirm length
                    Stage subStage = new Stage();
                    subStage.setTitle("Tech 2 GO");

                    primaryStage.close();

                    Pane subPane = new Pane();

                    Image image = new Image("https://cdn-imgix.headout.com/tour/22589/TOUR-IMAGE/f243beca-f842-4915-9c80-df5f65e81a20-11825-tokyo-early-blooming-cherry-blossom-?auto=compress&fm=pjpg&w=1080&h=675&crop=faces&fit=min");
                    ImageView iv = new ImageView(image);
                    iv.setFitWidth(Screen.getPrimary().getVisualBounds().getWidth());
                    iv.setFitHeight(Screen.getPrimary().getVisualBounds().getHeight());


                    Label label3 = new Label("What would you like to purchase? ");
                    label3.setLayoutY(30);

                    label3.setLayoutX(200);

                    label3.setStyle("-fx-text-fill: black");

                    //Create Results Label

                    Label label4 = new Label("Results: ");
                    label4.setLayoutY(300);

                    label4.setLayoutX(100);

                    label4.setStyle("-fx-text-fill: black");

                    //Create Quantity Label

                    Label label5 = new Label("Quantity: ");

                    label5.setLayoutY(230);

                    label5.setLayoutX(380);

                    label5.setStyle("-fx-text-fill: black");

                    //Create Purchase TextField

                    TextField TextField3 = new TextField();

                    TextField3.setLayoutX(220);

                    TextField3.setLayoutY(50);

                    //Create Results TextField

                    TextField TextField4 = new TextField();

                    TextField4.setLayoutX(100);

                    TextField4.setLayoutY(320);

                    TextField4.setPrefWidth(400);

                    TextField4.setPrefHeight(175);

                    //Create Quantity TextField

                    TextField TextField5 = new TextField();

                    TextField5.setLayoutX(430);

                    TextField5.setLayoutY(230);

                    TextField5.setPrefWidth(50);


                    Button b1 = new Button("Buy");

                    b1.setLayoutY(150);

                    b1.setLayoutX(150);

                    //Action of Buy Button

                    b1.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            //Change this to display in console

                            System.out.println("Buy button has been pressed");

                            //trymethod before I parse quantity
                            try {
                                String strquantity = TextField5.getText();
                                String userinput = TextField3.getText();
                                System.out.println(strquantity);
                                System.out.println(userinput);
                                int quan = Integer.parseInt(strquantity);
                                boolean t = searchInv(userinput, quan);
//Rn Errors that we are trying to fix: Does not print statements to textfield
                                //Should not be able to purchase if we dont have enough money
                                //
                                if (t) {
                                    //gets the value of price
                                    double price = searchPrice(userinput, quan);
                                    StoreFacade x = new StoreFacade();
                                    x.setPrice(price);
                                    x.observerTransaction();
                                    x.processTransaction(TextField3.getText(), Integer.parseInt(TextField5.getText()));
                                    x.description(TextField3.getText());
                                    textArea.appendText("\n"+x.description(TextField3.getText()).getAdditionalInfo(TextField3.getText())+"\n");
                                    textArea.appendText(x.description(TextField3.getText()).statement(TextField3.getText())+"\n");
                                    textArea.appendText(x.DisplayAmount()+"\n");
                                    //    r.processTransaction(TextField3.getText(),Integer.parseInt(TextField5.getText()));

                                }
                            } catch (NumberFormatException e) {
                                //try and catch statement in case user accidently  selects item without a quantity.

                                textArea.setText("ERROR: TEXTFIELD HAS BEEN LEFT BLANK. Please verify that \n you have selected a valid item and quantity before buying an item!");

                            } catch (Exception ex) {
                                ex.printStackTrace();
                                //catches any other errors un accounted for
                            } /*finally {
                                System.out.println("Select the quit button and try again. Please Enter Both item name and quantity in the textfields");

                            }*/


                        }
                    });

                    //List Items Button

                    Button b2 = new Button("List Items");

                    b2.setLayoutX(150);

                    b2.setLayoutY(200);

                    //Action of List Items Button

                    b2.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            String fi = IterateProducts();
                            textArea.setText(fi);
                            //return a string of all the products

                        }
                    });

                    //Clear Search Button

                    Button b3 = new Button("Clear Search");

                    b3.setLayoutY(100);

                    b3.setLayoutX(380);

                    //Action of Clear Search Button

                    b3.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            textArea.clear();
                            TextField3.clear();

                        }

                    });


                    //Search button
                    Button b4 = new Button("Search");
                    b4.setLayoutX(150);
                    b4.setLayoutY(100);

                    //Action of the Search Button
                    b4.setOnAction(new EventHandler<ActionEvent>() {
                        @Override
                        public void handle(ActionEvent event) {
                            String s = TextField3.getText();
                            if (s != null) {
                                System.out.println(s);
                            }
                            textArea.setText(s);
                            String search = search(s);
                            textArea.setText(search);
                            //store the string value of the product textfield.


                            //have a method to compare the value to the database.
                            //if the value is contained, print out all information regarding that product within the method.


                        }
                    });

                    //Create Stop Button

                    Button b6 = new Button("Stop");

                    b6.setLayoutY(500);

                    b6.setLayoutX(450);

                    //Action for the Stop Button

                    b6.setOnAction(new EventHandler<ActionEvent>() {

                        @Override

                        public void handle(ActionEvent event) {

                            try {

                                primaryStage.close();
                                //Added the command to close the next stage
                                subStage.close();

                            } catch (Exception e) {

                                // TODO Auto-generated catch block

                                e.printStackTrace();

                            }

                        }

                    });
                    subPane.getChildren().addAll(iv, label3, label4, label5, TextField3, TextField5, b1, b2, b3, b4, b6, textArea);

                    Scene subScene = new Scene(subPane, 600, 600);

                    subStage.setScene(subScene);

                    subStage.show();
                }

            }});
        //add to container
        textArea.setLayoutX(100);
        textArea.setLayoutY(320);
        pane.getChildren().addAll(iv,b5,label1,label2,TextField1,TextField2,login);

        //create Scene

        Scene mainScene = new Scene(pane, 600, 200);

        //add to Stage

        primaryStage.setScene(mainScene);

        //Show Stage

        primaryStage.show();


    }

    public boolean searchInv(String a, int quantity) {
        CountDownLatch latch = new CountDownLatch(1);
        // connect to the local database server,default:127.0.0.1:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        // get handle to "testDB" database
        MongoDatabase database = mongoClient.getDatabase("Tech2Go");
        MongoCollection<Document> collection = database.getCollection("Inventory");
        MongoCollection<org.bson.Document> collectionAdd = database.getCollection("Addon");

        //code below will help with timing.
        SingleResultCallback<Void> callbackWhenFinished = new SingleResultCallback<Void>() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println("Operation Finished!");
                latch.countDown();
            }
        };
        List<Document> inv = collection.find(Filters.eq("Product", a)).into(
                new ArrayList<Document>());
        if (inv.size() > 0) {

            if (inv.get(0).getString("Product").equals(a)) {
                //get the current value of the stock in the collections. subtract by quantity then update database.
                int stock = inv.get(0).getInteger("Stock");

                //conditonal to make sure stock does not go below 0
                if (quantity <= stock) {
                    stock = stock - quantity;
                } else {
                    //the quantity is more than at stock so let user know
                    //return false and print out the only stock avilable and ask user to input again
                    //Added in this line of code to make it make sense.
                    if(stock>1)
                    textArea.setText("We only have " + stock+" units available. Please re-enter quantity");
                    else
                        textArea.setText("We only have " + stock+" unit available. Please re-enter quantity");

                    return false;


                }
                collection.updateOne(Filters.eq("Product", a), Updates.set("Stock", stock));
                textArea.setText("Item and quantity is available");

                //close database because statement has updated.
                return true;
            }
        } else {
            System.out.println("Error: Item is not found. Please make sure you entered the correct item name along with the quantity. " +
                    "Press List Items to see the details of all items in stock");
            textArea.setText("Error: Item is not found. Please make sure you entered the correct item name along with the quantity. " +
                    "\nPress List Items to see the details of all items in stock");
        }

        List<Document> addOn = collectionAdd.find(Filters.eq("Product", a)).into(
                new ArrayList<Document>());
        if (addOn.size() > 0) {

            if (addOn.get(0).getString("Product").equals(a)) {
                //get the current value of the stock in the collections. subtract by quantity then update database.
                int stock = addOn.get(0).getInteger("Stock");

                //conditonal to make sure stock does not go below 0
                if (quantity <= stock) {
                    stock = stock - quantity;
                } else {
                    //the quantity is more than at stock so let user know
                    //return false and print out the only stock avilable and ask user to input again
                    System.out.printf("We only have %d available. Please re-enter quantity", stock);
                    return false;

                }
                collectionAdd.updateOne(Filters.eq("Product", a), Updates.set("Stock", stock));
                System.out.println("Item and quantity is available ");
                //close database because statement has updated.
                return true;
            }
        }

        return false;
    }

    //create method to iterate through products and addon items by creating two lists
    public String  IterateProducts() {
        CountDownLatch latch = new CountDownLatch(1);
        // connect to the local database server,default:127.0.0.1:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        // get handle to "testDB" database
        MongoDatabase database = mongoClient.getDatabase("Tech2Go");

        MongoCollection<org.bson.Document> collection = database.getCollection("Inventory");
        MongoCollection<org.bson.Document> collectionAddon = database.getCollection("Addon");

        //code below will help with timing.
        SingleResultCallback<Void> callbackWhenFinished = new SingleResultCallback<Void>() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println("Operation Finished!");
                latch.countDown();
            }
        };
        StringBuilder s1= new StringBuilder();
        List<Document> addOn = collectionAddon.find().into(new ArrayList<Document>());
        //used casting.
        List<Document> inv = collection.find().into(
                new ArrayList<Document>());
        for (Document items : inv) {
//print out Product, Price, Year relseased and stock in string format.

            s1.append("\nProduct: "+items.getString("Product"));
            s1.append("\nPrice: $"+items.getDouble("Price"));
            s1.append("\nYear Released: "+items.getInteger("YearReleased"));
            s1.append("\nStock: "+items.getInteger("Stock")+"\n");
            s1.append("Description: "+items.getString("Item_Description")+"\n");
            //return the array of inv


        }
        System.out.println();
        System.out.println();

        for (Document addInv : addOn) {

            s1.append("\nProduct: "+addInv.getString("Product"));
            s1.append("\nPrice: $"+addInv.getDouble("Price"));
            s1.append("\nDescription: "+addInv.getString("Description"));
            s1.append("\nWarranty period: "+addInv.getString("Warranty period"));
            s1.append("\nyear Stock: "+addInv.getInteger("Stock"));
            s1.append("\n");//space out products



        }

        return s1.toString();
    }

    public String[] AccountConfirmation(String username, String password) {
        /*if there is a username and password that matches a document, return all use information into a string*/


        CountDownLatch latch = new CountDownLatch(1);
        // connect to the local database server,default:127.0.0.1:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        // get handle to "testDB" database
        MongoDatabase database = mongoClient.getDatabase("Tech2Go");
        MongoCollection<org.bson.Document> collection = database.getCollection("Users");

        //code below will help with timing.
        SingleResultCallback<Void> callbackWhenFinished = new SingleResultCallback<Void>() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println("Operation Finished!");
                latch.countDown();
            }
        };
        List<Document> user = collection.find(Filters.eq("UserName", username)).into(
                new ArrayList<Document>());
        //if there is a document that matches, index would be 0
        if (user.size() > 0) {
            if (user.get(0).getString("UserName").equals(username) && user.get(0).getString("Password").equals(password)) {
                String[] account = new String[7];
                //means userinput matches an account in the db so extract all the user info into the database to create user class*/
                account[0] = user.get(0).getString("First_Name");
                account[1] = user.get(0).getString("Last_Name");
                account[2] = user.get(0).getString("Email_Address");
                account[3] = user.get(0).getString("password");
                account[4] = user.get(0).getString("Billing_Address");
                account[5] = user.get(0).getString("Shipping_address");
                account[6] = user.get(0).getString("UserName");
                //return array because found a match


                return account;
            }


        }
        String[] account = new String[0];
        //if the condtion didn't work the default account length would be 0;
        return account;


    }

    //for now create the same iteration but return the price of the item
    public double searchPrice(String a, int quantity) {
        double price = 0;
        CountDownLatch latch = new CountDownLatch(1);

        // connect to the local database server,default:127.0.0.1:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        // get handle to "testDB" database
        MongoDatabase database = mongoClient.getDatabase("Tech2Go");
        MongoCollection<org.bson.Document> collection = database.getCollection("Inventory");
        MongoCollection<org.bson.Document> collectionAddon = database.getCollection("Addon");
        List<Document> addOn = collectionAddon.find(Filters.eq("product", a)).into(
                new ArrayList<Document>());
        //code below will help with timing.

        SingleResultCallback<Void> callbackWhenFinished = new SingleResultCallback<Void>() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println("Operation Finished!");
                latch.countDown();
            }
        };
        List<Document> inv = collection.find(Filters.eq("Product", a)).into(
                new ArrayList<Document>());
        if (inv.size() > 0) {
            price = (inv.get(0).getDouble("Price") * (double) quantity);
            return price;
        }


        if (addOn.size() > 0) {
            //match the product now get the price of the product
            price = (addOn.get(0).getDouble("Price") * (double) quantity);
            return price;

        }
        return price;
    }

    public String search(String a) {
        CountDownLatch latch = new CountDownLatch(1);
        // connect to the local database server,default:127.0.0.1:27017
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        // get handle to "testDB" database
        MongoDatabase database = mongoClient.getDatabase("Tech2Go");
        MongoCollection<org.bson.Document> collection = database.getCollection("Inventory");
        MongoCollection<org.bson.Document> collectionAdd = database.getCollection("Addon");

        //code below will help with timing.
        SingleResultCallback<Void> callbackWhenFinished = new SingleResultCallback<Void>() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println("Operation Finished!");
                latch.countDown();
            }
        };
        List<Document> inv = collection.find(Filters.eq("Product", a)).into(
                new ArrayList<Document>());

        if (inv.size() > 0) {

            if (inv.get(0).getString("Product").equals(a)) {

                return String.format("Product: %s\n\n Price: %s\n Year Released: %s\n Stock: %s\n  Description: %s\n", inv.get(0).getString("Product"), inv.get(0).getDouble("Price"), inv.get(0).getInteger("YearReleased"), inv.get(0).getInteger("Stock"),inv.get(0).getString("Item_Description"));
            }
        }

        List<Document> addOn = collectionAdd.find(Filters.eq("Product", a)).into(
                new ArrayList<Document>());
        if (addOn.size() > 0) {
            if (addOn.get(0).getString("Product").equals(a)) {
                return String.format("Product: %s\n Price: %s\n Year Released: %s\n Stock: %s\n    Description: %s\n", addOn.get(0).getString("Product"), addOn.get(0).getDouble("Price"), addOn.get(0).getInteger("YearReleased"), addOn.get(0).getInteger("Stock"),inv.get(0).getString("Description"));

            } else {

                return String.format("Error: Item is not found. Please make sure you entered the correct item name along with the quantity. " +
                        "Press List Items to see the details of all items in stock");
            }

        }
        return a;
    }
}


